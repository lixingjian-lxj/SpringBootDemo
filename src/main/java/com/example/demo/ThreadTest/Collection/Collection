并发集合框架：
java语言中集合框架的父接口是Iterable
接口Collection提供了集合框架最主要、最常用的操作，主要是针对数据的增删改查操作

List接口：
接口List对Collection接口进行扩展，允许根据索引位置操作数据，并且允许内容重复
最常用的非并发实现类是ArrayList，非线程安全的，可以对数据以链表形式进行组织，使数据有序排序。
想使用线程安全的链表可以使用Vector类，但他并不持支Iterator并发删除（多个线程分别调用Iterator返回Iterator对象后，再调用remove()时会出现ConcurrentModificationException），
在功能上存有缺陷

Set接口：
Set接口也对Collection接口进行了扩展，默认特点是内容不允许重复，排序方式为自然排序
最常用的非并发实现类是HashSet,默认以无序的方式组织元素，LinkedHashSet以有序方式组织元素

接口Queue:
接口Queue对Collection接口进行了扩展，具有特点是可以方便的操作列头
非并发实现类有PriorityQueue,基于优先队列的无界优先队列

接口Deque：
接口Deque不仅支持对表头进行操作，还支持对表尾进行操作，被称为双端队列
Deque继承自Queue
非并发实现类有ArrayDeque和LinkedList，
如果只想从两端获取数据则使用ArrayDeque，
如果想实现从队列两端获取数据时还可以根据索引的位置操作数据则使用LinkedList

非阻塞队列
特点：队列中没有数据时，操作队列出现异常或返回null，不具有等待/阻塞的特色
常见的非阻塞队列：
（1）ConcurrentHashMap
（2）ConcurrentSkipListMap
（3）ConcurrentSkipListSet
（4）ConcurrentLinkedQueue
（5）ConcurrentLinkedDeque
（6）CopyOnWriteArrayList
（7）CopyOnWriteArraySet


阻塞队列：
阻塞队列BlockingQueue，如果BlockingQueue是空的，从BlockingQueue取数据就会被阻塞进入等待状态，直到BlockingQueue添加了元素才会被唤醒，
同样，如果BlockingQueue是满的，即没有空闲空间时，试图往队列中添加元素操作会被阻塞，直到BlockingQueue有空闲空间才会被唤醒继续操作

ArrayBlockingQueue：有界阻塞队列
PriorityBlockingQueue：支持优先级排序的无界队列，可以指定初始容量大小（注意初始容量并不代表最大容量），或者不指定，默认大小为 11。
LinkedBlockingQueue：链表组成的有界阻塞队列，可以不指定大小，默认值是Integer.MAX_VALUE
LinkedBlockingDeque：链表结构的双向阻塞队列

SynchronousQueue类为同步队列：
一种阻塞队列，每个插入操作必须等待另一个线程对应的移除操作，可以在多个线程之间传输数据时使用

DelayQueue：延时执行任务的队列

LinkedTransferQueue:
LinkedTransferQueue是一个有链表组成的无界阻塞Transfer队列。
相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法
LinkedTransferQueue采用一种预占模式：
即消费者线程取走元素时，如果队列不为空，则直接取走数据，
若队列为空，那就生成一个节点（节点元素为null）入队，然后消费者线程等待在这个节点上，
当生产者线程入队时发现队列存在元素为null的节点，生产者线程就不入队了，直接将元素填充到该节点，
并唤醒等待在这的消费者线程，消费者线程立即取走元素，从调用方法返回,这种模式为 “匹配模式”

take()方法具有阻塞特性

teansfer(Object e)作用：
（1）如果当前存在一个正等待取值的消费者线程，则把数据立即传输过去
（2）如果没有存在这样的消费者线程，那就将元素插入到尾部，并且进入阻塞状态，直到有消费者线程取走元素

tryTransfer(Object e)作用：
（1）如果当前存在一个正等待取值的消费者线程，使用tryTransfer(e)则把数据立即传输过去
（2）如果不存在，则返回false，并且数据不放入队列，执行效果是不阻塞
  
tryTransfer(Object e,Long timeout,TimeUnit unit)作用：
（1）如果当前存在一个正等待取值的消费者线程，则把数据立即传输过去
（2）如果不存在，将元素插入到队列尾部，等待消费者线程获取消费掉
（3）如果在指定时间内元素没有被消费者线程获取，返回false，并将元素从队列中移除

boolean hasWaitingConsumer()
判断有没有消费者等待数据
int getWaitingConsumerCount()
取得有多少个消费者在等待数据
